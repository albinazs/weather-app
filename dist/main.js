(()=>{"use strict";class e{static capitalise(e){return e.charAt(0).toUpperCase()+e.slice(1)}static getTemp(e){return Math.round(e)+"℃"}static getFeels(e){return"Feels like "+Math.round(e)+"℃"}static getWind(e){return"Wind: "+Math.round(10*e)/10+"m/s"}static getHumidity(e){return"Humidity: "+Math.round(e)+"%"}}document.querySelector("#weather-info"),document.querySelector("#city"),document.querySelector("#desc"),document.querySelector("#curr-temp"),document.querySelector("#deg");const t=document.querySelector("#icon"),o=(document.querySelector("#feels"),document.querySelector("#wind"),document.querySelector("#hum"),e=>{t.classList.add("visible"),t.src=`https://openweathermap.org/img/wn/${e}@2x.png`}),n=document.querySelector("input[type=search]"),c="54548de06c18d589b6cb4816609e68c3";document.querySelector("form").addEventListener("submit",(t=>async function(t){if(""==n.value)return;t.preventDefault();const r=`http://api.openweathermap.org/geo/1.0/direct?q=${n.value}&limit=5&appid=${c}`,i=await fetch(r),a=await i.json();!async function(t,n){const r=`https://api.openweathermap.org/data/2.5/weather?lat=${t}&lon=${n}&appid=${c}&units=metric`,i=await fetch(r),a=await i.json();console.log(a),(t=>{const n=t.name;console.log(n);const c=t.weather[0].description,r=e.capitalise(c);console.log(r);const i=t.main.temp,a=e.getTemp(i);console.log(a);const s=t.weather[0].icon,u=t.main.feels_like,l=e.getFeels(u);console.log(l);const d=t.wind.speed,m=e.getWind(d);console.log(m);const p=t.main.humidity,g=e.getHumidity(p);console.log(g),o(s)})(a)}(a[0].lat,a[0].lon),n.value=""}(t)))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoibUJBQU8sTUFBTUEsRUFDWEMsa0JBQWtCQyxHQUNoQixPQUFPQSxFQUFPQyxPQUFPLEdBQUdDLGNBQWdCRixFQUFPRyxNQUFNLEVBQ3ZELENBRUFKLGVBQWVLLEdBQ2IsT0FBT0MsS0FBS0MsTUFBTUYsR0FBZSxHQUNuQyxDQUVBTCxnQkFBZ0JRLEdBQ2QsTUFBTyxjQUFnQkYsS0FBS0MsTUFBTUMsR0FBb0IsR0FDeEQsQ0FFQVIsZUFBZVMsR0FDYixNQUFPLFNBQVdILEtBQUtDLE1BQW9CLEdBQWRFLEdBQW9CLEdBQUssS0FDeEQsQ0FFQVQsbUJBQW1CVSxHQUNqQixNQUFPLGFBQWVKLEtBQUtDLE1BQU1HLEdBQW1CLEdBQ3RELEVDakJpQkMsU0FBU0MsY0FBYyxpQkFDMUJELFNBQVNDLGNBQWMsU0FDaEJELFNBQVNDLGNBQWMsU0FDdkJELFNBQVNDLGNBQWMsY0FDNUJELFNBQVNDLGNBQWMsUUFKekMsTUFLTUMsRUFBT0YsU0FBU0MsY0FBYyxTQXVDOUJFLEdBdENXSCxTQUFTQyxjQUFjLFVBQ3hCRCxTQUFTQyxjQUFjLFNBQ25CRCxTQUFTQyxjQUFjLFFBb0N2QkcsSUFDbEJGLEVBQUtHLFVBQVVDLElBQUksV0FDbkJKLEVBQUtLLElBQU0scUNBQXFDSCxVQUFlLEdDOUMzREksRUFBU1IsU0FBU0MsY0FBYyxzQkFDaENRLEVBQVUsbUNDREhULFNBQVNDLGNBQWMsUUFDL0JTLGlCQUFpQixVQUFXQyxHREUxQkMsZUFBMkJELEdBQ2hDLEdBQW9CLElBQWhCSCxFQUFPSyxNQUFhLE9BQ3hCRixFQUFFRyxpQkFDRixNQUNNQyxFQUFVLGtEQURNUCxFQUFPSyx1QkFDb0VKLElBQzNGTyxRQUFpQkMsTUFBTUYsR0FDdkJHLFFBQWVGLEVBQVNHLFFBVWhDUCxlQUEwQlEsRUFBS0MsR0FDN0IsTUFBTU4sRUFBVSx1REFBdURLLFNBQVdDLFdBQWFaLGlCQUN6Rk8sUUFBaUJDLE1BQU1GLEdBQ3ZCTyxRQUFvQk4sRUFBU0csT0FDbkNJLFFBQVFDLElBQUlGLEdEYmUsQ0FBQ0EsSUFHNUIsTUFBTUcsRUFBT0gsRUFBWUksS0FDekJILFFBQVFDLElBQUlDLEdBRVosTUFBTUUsRUFBaUJMLEVBQVlNLFFBQVEsR0FBR0MsWUFDeENDLEVBQW1CMUMsRUFBSzJDLFdBQVdKLEdBQ3pDSixRQUFRQyxJQUFJTSxHQUVaLE1BQU1FLEVBQU9WLEVBQVlXLEtBQUtELEtBQ3hCRSxFQUFZOUMsRUFBSytDLFFBQVFILEdBQy9CVCxRQUFRQyxJQUFJVSxHQUVaLE1BQU05QixFQUFTa0IsRUFBWU0sUUFBUSxHQUFHMUIsS0FHaENMLEVBQW1CeUIsRUFBWVcsS0FBS0csV0FDcENDLEVBQXFCakQsRUFBS2tELFNBQVN6QyxHQUN6QzBCLFFBQVFDLElBQUlhLEdBRVosTUFBTXZDLEVBQWN3QixFQUFZaUIsS0FBS0MsTUFDL0JDLEVBQWdCckQsRUFBS3NELFFBQVE1QyxHQUNuQ3lCLFFBQVFDLElBQUlpQixHQUVaLE1BQU0xQyxFQUFrQnVCLEVBQVlXLEtBQUtVLFNBQ25DQyxFQUFvQnhELEVBQUt5RCxZQUFZOUMsR0FDM0N3QixRQUFRQyxJQUFJb0IsR0FJWnpDLEVBQVdDLEVBQU8sRUNoQmxCMEMsQ0FBY3hCLEVBQ2hCLENBWkV5QixDQUhZN0IsRUFBTyxHQUFHRSxJQUNWRixFQUFPLEdBQUdHLEtBSXRCYixFQUFPSyxNQUFRLEVBQ2pCLENDaEJ1Q21DLENBQVlyQyxJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9zcmMvZGF0YS5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL3NyYy9kb20uanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9zcmMvYXBpLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBEYXRhIHtcbiAgc3RhdGljIGNhcGl0YWxpc2Uoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0cmluZy5zbGljZSgxKTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRUZW1wKHJhd1RlbXBEYXRhKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQocmF3VGVtcERhdGEpICsgXCJcXHUyMTAzXCI7XG4gIH1cblxuICBzdGF0aWMgZ2V0RmVlbHMocmF3RmVlbHNMaWtlRGF0YSkge1xuICAgIHJldHVybiBcIkZlZWxzIGxpa2UgXCIgKyBNYXRoLnJvdW5kKHJhd0ZlZWxzTGlrZURhdGEpICsgXCJcXHUyMTAzXCI7XG4gIH1cblxuICBzdGF0aWMgZ2V0V2luZChyYXdXaW5kRGF0YSkge1xuICAgIHJldHVybiBcIldpbmQ6IFwiICsgTWF0aC5yb3VuZChyYXdXaW5kRGF0YSAqIDEwKSAvIDEwICsgXCJtL3NcIjtcbiAgfVxuXG4gIHN0YXRpYyBnZXRIdW1pZGl0eShyYXdIdW1pZGl0eURhdGEpIHtcbiAgICByZXR1cm4gXCJIdW1pZGl0eTogXCIgKyBNYXRoLnJvdW5kKHJhd0h1bWlkaXR5RGF0YSkgKyBcIiVcIjtcbiAgfVxufVxuIiwiaW1wb3J0IHsgRGF0YSB9IGZyb20gXCIuL2RhdGFcIjtcblxuY29uc3Qgd2VhdGhlckRpdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjd2VhdGhlci1pbmZvXCIpO1xuY29uc3QgY2l0eURpdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjY2l0eVwiKTtcbmNvbnN0IGRlc2NyaXB0aW9uRGl2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNkZXNjXCIpO1xuY29uc3QgY3VycmVudFRlbXBEaXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2N1cnItdGVtcFwiKTtcbmNvbnN0IGRlZ3JlZURpdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZGVnXCIpO1xuY29uc3QgaWNvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjaWNvblwiKTtcbmNvbnN0IGZlZWxzRGl2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNmZWVsc1wiKTtcbmNvbnN0IHdpbmREaXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3dpbmRcIik7XG5jb25zdCBodW1pZGl0eURpdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjaHVtXCIpO1xuXG5leHBvcnQgY29uc3QgcmVuZGVyV2VhdGhlciA9ICh3ZWF0aGVyRGF0YSkgPT4ge1xuICAvL2hpZGUgb25sb2FkIFxuXG4gIGNvbnN0IGNpdHkgPSB3ZWF0aGVyRGF0YS5uYW1lO1xuICBjb25zb2xlLmxvZyhjaXR5KTtcblxuICBjb25zdCByYXdEZXNjcmlwdGlvbiA9IHdlYXRoZXJEYXRhLndlYXRoZXJbMF0uZGVzY3JpcHRpb247XG4gIGNvbnN0IGZpbmFsRGVzY3JpcHRpb24gPSBEYXRhLmNhcGl0YWxpc2UocmF3RGVzY3JpcHRpb24pO1xuICBjb25zb2xlLmxvZyhmaW5hbERlc2NyaXB0aW9uKVxuXG4gIGNvbnN0IHRlbXAgPSB3ZWF0aGVyRGF0YS5tYWluLnRlbXA7XG4gIGNvbnN0IGZpbmFsVGVtcCA9IERhdGEuZ2V0VGVtcCh0ZW1wKTtcbiAgY29uc29sZS5sb2coZmluYWxUZW1wKTtcblxuICBjb25zdCBpY29uSUQgPSB3ZWF0aGVyRGF0YS53ZWF0aGVyWzBdLmljb247XG5cblxuICBjb25zdCByYXdGZWVsc0xpa2VEYXRhID0gd2VhdGhlckRhdGEubWFpbi5mZWVsc19saWtlO1xuICBjb25zdCBmaW5hbEZlZWxzTGlrZURhdGEgPSBEYXRhLmdldEZlZWxzKHJhd0ZlZWxzTGlrZURhdGEpO1xuICBjb25zb2xlLmxvZyhmaW5hbEZlZWxzTGlrZURhdGEpO1xuXG4gIGNvbnN0IHJhd1dpbmREYXRhID0gd2VhdGhlckRhdGEud2luZC5zcGVlZDtcbiAgY29uc3QgZmluYWxXaW5kRGF0YSA9IERhdGEuZ2V0V2luZChyYXdXaW5kRGF0YSk7XG4gIGNvbnNvbGUubG9nKGZpbmFsV2luZERhdGEpO1xuXG4gIGNvbnN0IHJhd0h1bWlkaXR5RGF0YSA9IHdlYXRoZXJEYXRhLm1haW4uaHVtaWRpdHk7XG4gIGNvbnN0IGZpbmFsSHVtaWRpdHlEYXRhID0gRGF0YS5nZXRIdW1pZGl0eShyYXdIdW1pZGl0eURhdGEpO1xuICBjb25zb2xlLmxvZyhmaW5hbEh1bWlkaXR5RGF0YSk7XG5cbiAgXG5cbiAgcmVuZGVySWNvbihpY29uSUQpO1xufTtcblxuY29uc3QgcmVuZGVySWNvbiA9IChpY29uSUQpID0+IHtcbiAgaWNvbi5jbGFzc0xpc3QuYWRkKFwidmlzaWJsZVwiKTtcbiAgaWNvbi5zcmMgPSBgaHR0cHM6Ly9vcGVud2VhdGhlcm1hcC5vcmcvaW1nL3duLyR7aWNvbklEfUAyeC5wbmdgO1xufTtcbiIsImltcG9ydCB7IHJlbmRlcldlYXRoZXIgfSBmcm9tIFwiLi9kb21cIjtcblxuY29uc3Qgc2VhcmNoID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImlucHV0W3R5cGU9c2VhcmNoXVwiKTtcbmNvbnN0IEFQSV9LRVkgPSBcIjU0NTQ4ZGUwNmMxOGQ1ODliNmNiNDgxNjYwOWU2OGMzXCI7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRMb2NhdGlvbihlKSB7XG4gIGlmIChzZWFyY2gudmFsdWUgPT0gXCJcIikgcmV0dXJuO1xuICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIGNvbnN0IHNlYXJjaFJlcXVlc3QgPSBzZWFyY2gudmFsdWU7XG4gIGNvbnN0IHJlcXVlc3QgPSBgaHR0cDovL2FwaS5vcGVud2VhdGhlcm1hcC5vcmcvZ2VvLzEuMC9kaXJlY3Q/cT0ke3NlYXJjaFJlcXVlc3R9JmxpbWl0PTUmYXBwaWQ9JHtBUElfS0VZfWA7XG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2gocmVxdWVzdCk7XG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcblxuICBjb25zdCBsYXQgPSByZXN1bHRbMF0ubGF0O1xuICBjb25zdCBsb24gPSByZXN1bHRbMF0ubG9uO1xuXG4gIGdldFdlYXRoZXIobGF0LCBsb24pO1xuXG4gIHNlYXJjaC52YWx1ZSA9IFwiXCI7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldFdlYXRoZXIobGF0LCBsb24pIHtcbiAgY29uc3QgcmVxdWVzdCA9IGBodHRwczovL2FwaS5vcGVud2VhdGhlcm1hcC5vcmcvZGF0YS8yLjUvd2VhdGhlcj9sYXQ9JHtsYXR9Jmxvbj0ke2xvbn0mYXBwaWQ9JHtBUElfS0VZfSZ1bml0cz1tZXRyaWNgO1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHJlcXVlc3QpO1xuICBjb25zdCB3ZWF0aGVyRGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgY29uc29sZS5sb2cod2VhdGhlckRhdGEpO1xuXG4gIHJlbmRlcldlYXRoZXIod2VhdGhlckRhdGEpO1xufVxuIiwiaW1wb3J0IHsgZ2V0TG9jYXRpb24gfSBmcm9tIFwiLi9hcGlcIjtcblxuY29uc3QgZm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJmb3JtXCIpO1xuZm9ybS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIChlKSA9PiBnZXRMb2NhdGlvbihlKSk7XG5cbi8vIGlmIHN1Ym1pdHRlZCAtIGNsZWFyIGZvcm0sIHNob3cgY2l0eSBhbmQgd2VhdGhlclxuLy9jbGVhbiBkYXRhXG4iXSwibmFtZXMiOlsiRGF0YSIsInN0YXRpYyIsInN0cmluZyIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwic2xpY2UiLCJyYXdUZW1wRGF0YSIsIk1hdGgiLCJyb3VuZCIsInJhd0ZlZWxzTGlrZURhdGEiLCJyYXdXaW5kRGF0YSIsInJhd0h1bWlkaXR5RGF0YSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImljb24iLCJyZW5kZXJJY29uIiwiaWNvbklEIiwiY2xhc3NMaXN0IiwiYWRkIiwic3JjIiwic2VhcmNoIiwiQVBJX0tFWSIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwiYXN5bmMiLCJ2YWx1ZSIsInByZXZlbnREZWZhdWx0IiwicmVxdWVzdCIsInJlc3BvbnNlIiwiZmV0Y2giLCJyZXN1bHQiLCJqc29uIiwibGF0IiwibG9uIiwid2VhdGhlckRhdGEiLCJjb25zb2xlIiwibG9nIiwiY2l0eSIsIm5hbWUiLCJyYXdEZXNjcmlwdGlvbiIsIndlYXRoZXIiLCJkZXNjcmlwdGlvbiIsImZpbmFsRGVzY3JpcHRpb24iLCJjYXBpdGFsaXNlIiwidGVtcCIsIm1haW4iLCJmaW5hbFRlbXAiLCJnZXRUZW1wIiwiZmVlbHNfbGlrZSIsImZpbmFsRmVlbHNMaWtlRGF0YSIsImdldEZlZWxzIiwid2luZCIsInNwZWVkIiwiZmluYWxXaW5kRGF0YSIsImdldFdpbmQiLCJodW1pZGl0eSIsImZpbmFsSHVtaWRpdHlEYXRhIiwiZ2V0SHVtaWRpdHkiLCJyZW5kZXJXZWF0aGVyIiwiZ2V0V2VhdGhlciIsImdldExvY2F0aW9uIl0sInNvdXJjZVJvb3QiOiIifQ==